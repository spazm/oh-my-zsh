# Path to your oh-my-zsh configuration.
ZSH=$HOME/.dotfiles/oh-my-zsh

# Set name of the theme to load.
# Look in ~/.oh-my-zsh/themes/
# Optionally, if you set this to "random", it'll load a random theme each
# time that oh-my-zsh is loaded.
ZSH_THEME="dhaivat"

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Comment this out to disable weekly auto-update checks
DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment following line if you want red dots to be displayed while waiting for completion
COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# The optional three formats: "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load? (plugins can be found in ~/.oh-my-zsh/plugins/*)
# Custom plugins may be added to ~/.oh-my-zsh/custom/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
plugins=(git battery gitfast)

# User configuration

[ -f "$ZSH/oh-my-zsh.sh" ] && . $ZSH/oh-my-zsh.sh

# make PATH/path unique
# typeset -U path
# prepend $HOME/bin to path
# path=($HOME/bin $HOME/.fzf/bin /snap/bin "$path[@]" )

# export MANPATH="/usr/local/man:$MANPATH"

setopt hist_ignore_all_dups
unsetopt correct_all
bindkey -v
bindkey "^r" history-incremental-search-backward


# Customize to your needs...


#ssh() {
#    screen_title "$1";
#    titlecmd "$1";
#    command ssh $*;
#    screen_title "$HOSTNAME";
#}

#
# end: Xterm and Screen title update
set-show-tabs() {
    global=
    test "$1" = -g || test "$1" = --global && global=--global
    cws=$(command git config $global core.whitespace)
    case "$cws" in
        tab-in-indent,*|*,tab-in-indent|*,tab-in-indent,*) ;;
        *) command git config $global core.whitespace "$cws"${cws:+,}tab-in-indent ;;
    esac
}
set-show-tabs           # only in local repository
set-show-tabs --global  # for all your Git activities

_complete_ssh_hosts ()
{
        COMPREPLY=()
        cur="${COMP_WORDS[COMP_CWORD]}"
        comp_ssh_hosts=`cat ~/.ssh/known_hosts | \
                        cut -f 1 -d ' ' | \
                        sed -e s/,.*//g | \
                        grep -v ^# | \
                        uniq | \
                        grep -v "\[" ;
                cat ~/.ssh/config | \
                        grep "^Host " | \
                        awk '{print $2}'
                `
        COMPREPLY=( $(compgen -W "${comp_ssh_hosts}" -- $cur))
        return 0
}
compctl -F _complete_ssh_hosts ssh
compctl -F _complete_ssh_hosts rpup
#compctl -o default -o nospace -W “$(awk ‘/^Host / {print $2}’ < $HOME/.ssh/config) scp sftp SSH
# Bash-like command editing
autoload -U edit-command-line; zle -N edit-command-line; bindkey '^X^e' edit-command-line;

# unalias gl
BREW_PREFIX=`brew --prefix` 2>/dev/null
[ -f ${BREW_PREFIX}/etc/profile.d/z.sh ] && . ${BREW_PREFIX}/etc/profile.d/z.sh
[ -f '/usr/local/gcloud/google-cloud-sdk/completion.zsh.inc' ] && . '/usr/local/gcloud/google-cloud-sdk/completion.zsh.inc'

fix_ssh_old () {
    eval $(tmux show-environment | grep ^SSH_AUTH_SOCK)
}

MY_AUTH_SOCK="$HOME/.ssh/agent.sock"
fix_ssh () {
    if [ -z ${TMUX+x} ]; then
        case "$SSH_AUTH_SOCK" in
            "$MY_AUTH_SOCK")
                ;;
            *)
                echo "re-linking $MY_AUTH_SOCK"
                ln --force -s $SSH_AUTH_SOCK $MY_AUTH_SOCK
                export SSH_AUTH_SOCK=$MY_AUTH_SOCK
                ;;
        esac
        return
    fi

    tmux_show_environment=$(tmux show-environment 2>/dev/null | grep ^SSH_AUTH_SOCK)
    if [ $? -ne 0 ]; then
        echo "tmux show-environment failed"
        return
    fi

    #echo "tmux_show_environment: $tmux_show_environment"
    eval $(echo "TMUX_$tmux_show_environment")
    # sets $TMUX_SSH_AUTH_SOCK

    case "$TMUX_SSH_AUTH_SOCK" in
        "$MY_AUTH_SOCK")
            ;;
        *)
            echo "re-linking $MY_AUTH_SOCK"
            echo "ln --force -s $TMUX_SSH_AUTH_SOCK $MY_AUTH_SOCK"
            ln --force -s "$TMUX_SSH_AUTH_SOCK" "$MY_AUTH_SOCK"
            ;;
    esac
    case "$SSH_AUTH_SOCK" in
        "$MY_AUTH_SOCK")
            ;;
        *)
            echo "exporting SSH_AUTH_SOCK"
            export SSH_AUTH_SOCK=$MY_AUTH_SOCK
            ;;
    esac
}
setopt autonamedirs
s=$HOME/src/ZipRecruiter
z=~s/ziprecruiter
l=/vol/log

alias mr='killall -r plackup -w -q; killall -r starman -w -q; cd $STARTERVIEW; bin/zr-www-app'

# export PATH=$HOME/bin:/usr/local/bin:$PATH:/usr/games
# export PATH=$PATH:$HOME/.cargo/bin
# PATH=$PATH:/usr/games
fortune | cowsay
# export EDITOR=vim

# export GOPATH=$HOME/go
# export GOROOT=/snap/go
# export PATH=$PATH:$GOPATH/bin

alias light='echo "setting ITERM_PROFILE to light"; export ITERM_PROFILE="light"'
alias dark='echo "setting ITERM_PROFILE to dark"; export ITERM_PROFILE="dark"'

# >>> conda initialize >>>
# !! Contents within this block are managed by 'conda init' !!
__conda_setup="$('/home/andrew/miniconda3/bin/conda' 'shell.zsh' 'hook' 2> /dev/null)"
if [ $? -eq 0 ]; then
    eval "$__conda_setup"
else
    if [ -f "/home/andrew/miniconda3/etc/profile.d/conda.sh" ]; then
        . "/home/andrew/miniconda3/etc/profile.d/conda.sh"
    else
        export PATH="/home/andrew/miniconda3/bin:$PATH"
    fi
fi
unset __conda_setup
# <<< conda initialize <<<

