# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:/usr/local/bin:$PATH

# Path to your oh-my-zsh installation.
export ZSH=$HOME/.dotfiles/oh-my-zsh

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time oh-my-zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="dhaivat"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment the following line to disable bi-weekly auto-update checks.
DISABLE_AUTO_UPDATE="true"

# Uncomment the following line to automatically update without prompting.
# DISABLE_UPDATE_PROMPT="true"

# Uncomment the following line to change how often to auto-update (in days).
# export UPDATE_ZSH_DAYS=13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# Caution: this setting can cause issues with multiline prompts (zsh 5.7.1 and newer seem to work)
# See https://github.com/ohmyzsh/ohmyzsh/issues/5765
COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
plugins=(git battery gitfast)

[ -f "$ZSH/oh-my-zsh.sh" ] && source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Customize to your needs...

setopt hist_ignore_all_dups
unsetopt correct_all
bindkey -v
bindkey "^r" history-incremental-search-backward


# Set personal aliases, overriding those provided by oh-my-zsh libs,
# plugins, and themes. Aliases can be placed here, though oh-my-zsh
# users are encouraged to define aliases within the ZSH_CUSTOM folder.
# For a full list of active aliases, run `alias`.

#ssh() {
#    screen_title "$1";
#    titlecmd "$1";
#    command ssh $*;
#    screen_title "$HOSTNAME";
#}

#
# end: Xterm and Screen title update
set-show-tabs() {
    global=
    test "$1" = -g || test "$1" = --global && global=--global
    cws=$(command git config $global core.whitespace)
    case "$cws" in
        tab-in-indent,*|*,tab-in-indent|*,tab-in-indent,*) ;;
        *) command git config $global core.whitespace "$cws"${cws:+,}tab-in-indent ;;
    esac
}
set-show-tabs           # only in local repository
set-show-tabs --global  # for all your Git activities

_complete_ssh_hosts ()
{
        COMPREPLY=()
        cur="${COMP_WORDS[COMP_CWORD]}"
        comp_ssh_hosts=`cat ~/.ssh/known_hosts | \
                        cut -f 1 -d ' ' | \
                        sed -e s/,.*//g | \
                        grep -v ^# | \
                        uniq | \
                        grep -v "\[" ;
                cat ~/.ssh/config | \
                        grep "^Host " | \
                        awk '{print $2}'
                `
        COMPREPLY=( $(compgen -W "${comp_ssh_hosts}" -- $cur))
        return 0
}
compctl -F _complete_ssh_hosts ssh
compctl -F _complete_ssh_hosts rpup
#compctl -o default -o nospace -W “$(awk ‘/^Host / {print $2}’ < $HOME/.ssh/config) scp sftp SSH
# Bash-like command editing
autoload -U edit-command-line; zle -N edit-command-line; bindkey '^X^e' edit-command-line;

# unalias gl
BREW_PREFIX=`brew --prefix` 2>/dev/null
[ -f ${BREW_PREFIX}/etc/profile.d/z.sh ] && . ${BREW_PREFIX}/etc/profile.d/z.sh
[ -f '/usr/local/gcloud/google-cloud-sdk/completion.zsh.inc' ] && . '/usr/local/gcloud/google-cloud-sdk/completion.zsh.inc'

fix_ssh_old () {
    eval $(tmux show-environment | grep ^SSH_AUTH_SOCK)
}

MY_AUTH_SOCK="$HOME/.ssh/agent.sock"
fix_ssh () {
    if [ -z ${TMUX+x} ]; then
        case "$SSH_AUTH_SOCK" in
            "$MY_AUTH_SOCK")
                ;;
            *)
                echo "re-linking $MY_AUTH_SOCK"
                ln --force -s $SSH_AUTH_SOCK $MY_AUTH_SOCK
                export SSH_AUTH_SOCK=$MY_AUTH_SOCK
                ;;
        esac
        return
    fi

    tmux_show_environment=$(tmux show-environment 2>/dev/null | grep ^SSH_AUTH_SOCK)
    if [ $? -ne 0 ]; then
        echo "tmux show-environment failed"
        return
    fi

    #echo "tmux_show_environment: $tmux_show_environment"
    eval $(echo "TMUX_$tmux_show_environment")
    # sets $TMUX_SSH_AUTH_SOCK

    case "$TMUX_SSH_AUTH_SOCK" in
        "$MY_AUTH_SOCK")
            ;;
        *)
            echo "re-linking $MY_AUTH_SOCK"
            echo "ln --force -s $TMUX_SSH_AUTH_SOCK $MY_AUTH_SOCK"
            ln --force -s "$TMUX_SSH_AUTH_SOCK" "$MY_AUTH_SOCK"
            ;;
    esac
    case "$SSH_AUTH_SOCK" in
        "$MY_AUTH_SOCK")
            ;;
        *)
            echo "exporting SSH_AUTH_SOCK"
            export SSH_AUTH_SOCK=$MY_AUTH_SOCK
            ;;
    esac
}
setopt autonamedirs

# export PATH=$HOME/bin:/usr/local/bin:$PATH:/usr/games
# export PATH=$PATH:$HOME/.cargo/bin
# PATH=$PATH:/usr/games
fortune | cowsay
# export EDITOR=vim

alias light='echo "setting ITERM_PROFILE to light"; export ITERM_PROFILE="light"'
alias dark='echo "setting ITERM_PROFILE to dark"; export ITERM_PROFILE="dark"'
